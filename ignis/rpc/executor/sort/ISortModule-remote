#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.sort import ISortModule
from ignis.rpc.executor.sort.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void localCustomSort(ISource funct, bool ascending)')
    print('  void localSort(bool ascending)')
    print('  void sampling(i64 sampleSize, i64 idx, string master)')
    print('  void getPivots()')
    print('  void findPivots( nodes)')
    print('  void exchangePartitions(i64 idx,  nodes)')
    print('  void mergePartitions()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ISortModule.Client(protocol)
transport.open()

if cmd == 'localCustomSort':
    if len(args) != 2:
        print('localCustomSort requires 2 args')
        sys.exit(1)
    pp.pprint(client.localCustomSort(eval(args[0]), eval(args[1]),))

elif cmd == 'localSort':
    if len(args) != 1:
        print('localSort requires 1 args')
        sys.exit(1)
    pp.pprint(client.localSort(eval(args[0]),))

elif cmd == 'sampling':
    if len(args) != 3:
        print('sampling requires 3 args')
        sys.exit(1)
    pp.pprint(client.sampling(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getPivots':
    if len(args) != 0:
        print('getPivots requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPivots())

elif cmd == 'findPivots':
    if len(args) != 1:
        print('findPivots requires 1 args')
        sys.exit(1)
    pp.pprint(client.findPivots(eval(args[0]),))

elif cmd == 'exchangePartitions':
    if len(args) != 2:
        print('exchangePartitions requires 2 args')
        sys.exit(1)
    pp.pprint(client.exchangePartitions(eval(args[0]), eval(args[1]),))

elif cmd == 'mergePartitions':
    if len(args) != 0:
        print('mergePartitions requires 0 args')
        sys.exit(1)
    pp.pprint(client.mergePartitions())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
