#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.storage import IStorageModule
from ignis.rpc.executor.storage.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 count()')
    print('  void cache(i64 id)')
    print('  void uncache(i64 id)')
    print('  void loadCache(i64 id)')
    print('  void saveContext(i64 id)')
    print('  void loadContext(i64 id)')
    print('  string take(i64 n, bool light)')
    print('  string takeSample(i64 n, bool withRemplacement, i32 seed, bool light)')
    print('  string collect(bool light)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IStorageModule.Client(protocol)
transport.open()

if cmd == 'count':
    if len(args) != 0:
        print('count requires 0 args')
        sys.exit(1)
    pp.pprint(client.count())

elif cmd == 'cache':
    if len(args) != 1:
        print('cache requires 1 args')
        sys.exit(1)
    pp.pprint(client.cache(eval(args[0]),))

elif cmd == 'uncache':
    if len(args) != 1:
        print('uncache requires 1 args')
        sys.exit(1)
    pp.pprint(client.uncache(eval(args[0]),))

elif cmd == 'loadCache':
    if len(args) != 1:
        print('loadCache requires 1 args')
        sys.exit(1)
    pp.pprint(client.loadCache(eval(args[0]),))

elif cmd == 'saveContext':
    if len(args) != 1:
        print('saveContext requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveContext(eval(args[0]),))

elif cmd == 'loadContext':
    if len(args) != 1:
        print('loadContext requires 1 args')
        sys.exit(1)
    pp.pprint(client.loadContext(eval(args[0]),))

elif cmd == 'take':
    if len(args) != 2:
        print('take requires 2 args')
        sys.exit(1)
    pp.pprint(client.take(eval(args[0]), eval(args[1]),))

elif cmd == 'takeSample':
    if len(args) != 4:
        print('takeSample requires 4 args')
        sys.exit(1)
    pp.pprint(client.takeSample(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'collect':
    if len(args) != 1:
        print('collect requires 1 args')
        sys.exit(1)
    pp.pprint(client.collect(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
