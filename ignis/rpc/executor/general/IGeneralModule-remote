#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.general import IGeneralModule
from ignis.rpc.executor.general.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void map_(ISource src)')
    print('  void filter(ISource src)')
    print('  void flatmap(ISource src)')
    print('  void mapPartitions(ISource src, bool preservesPartitioning)')
    print('  void mapPartitionsWithIndex(ISource src, bool preservesPartitioning)')
    print('  void applyPartition(ISource src)')
    print('  void groupBy(ISource src)')
    print('  void groupBy2(ISource src, i64 numPartitions)')
    print('  void sort(bool ascending)')
    print('  void sort2(bool ascending, i64 numPartitions)')
    print('  void sortBy(ISource src, bool ascending)')
    print('  void sortBy3(ISource src, bool ascending, i64 numPartitions)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IGeneralModule.Client(protocol)
transport.open()

if cmd == 'map_':
    if len(args) != 1:
        print('map_ requires 1 args')
        sys.exit(1)
    pp.pprint(client.map_(eval(args[0]),))

elif cmd == 'filter':
    if len(args) != 1:
        print('filter requires 1 args')
        sys.exit(1)
    pp.pprint(client.filter(eval(args[0]),))

elif cmd == 'flatmap':
    if len(args) != 1:
        print('flatmap requires 1 args')
        sys.exit(1)
    pp.pprint(client.flatmap(eval(args[0]),))

elif cmd == 'mapPartitions':
    if len(args) != 2:
        print('mapPartitions requires 2 args')
        sys.exit(1)
    pp.pprint(client.mapPartitions(eval(args[0]), eval(args[1]),))

elif cmd == 'mapPartitionsWithIndex':
    if len(args) != 2:
        print('mapPartitionsWithIndex requires 2 args')
        sys.exit(1)
    pp.pprint(client.mapPartitionsWithIndex(eval(args[0]), eval(args[1]),))

elif cmd == 'applyPartition':
    if len(args) != 1:
        print('applyPartition requires 1 args')
        sys.exit(1)
    pp.pprint(client.applyPartition(eval(args[0]),))

elif cmd == 'groupBy':
    if len(args) != 1:
        print('groupBy requires 1 args')
        sys.exit(1)
    pp.pprint(client.groupBy(eval(args[0]),))

elif cmd == 'groupBy2':
    if len(args) != 2:
        print('groupBy2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.groupBy2(eval(args[0]), eval(args[1]),))

elif cmd == 'sort':
    if len(args) != 1:
        print('sort requires 1 args')
        sys.exit(1)
    pp.pprint(client.sort(eval(args[0]),))

elif cmd == 'sort2':
    if len(args) != 2:
        print('sort2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.sort2(eval(args[0]), eval(args[1]),))

elif cmd == 'sortBy':
    if len(args) != 2:
        print('sortBy requires 2 args')
        sys.exit(1)
    pp.pprint(client.sortBy(eval(args[0]), eval(args[1]),))

elif cmd == 'sortBy3':
    if len(args) != 3:
        print('sortBy3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.sortBy3(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
