#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.driver.worker import IWorkerService
from ignis.rpc.driver.worker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  IWorkerId newInstance(i64 id, string type)')
    print('  IWorkerId newInstance3a(i64 id, string name, string type)')
    print('  IWorkerId newInstance3b(i64 id, string type, i32 cores)')
    print('  IWorkerId newInstance4(i64 id, string name, string type, i32 cores)')
    print('  void setName(IWorkerId id, string name)')
    print('  IDataFrameId parallelize(IWorkerId id, i64 dataId)')
    print('  IDataFrameId parallelize3(IWorkerId id, i64 dataId, ISource src)')
    print('  IDataFrameId importDataFrame(IWorkerId id, IDataFrameId data)')
    print('  IDataFrameId importDataFrame3a(IWorkerId id, IDataFrameId data, i64 partitions)')
    print('  IDataFrameId importDataFrame3b(IWorkerId id, IDataFrameId data, ISource src)')
    print('  IDataFrameId importDataFrame4(IWorkerId id, IDataFrameId data, i64 partitions, ISource src)')
    print('  IDataFrameId textFile(IWorkerId id, string path)')
    print('  IDataFrameId textFile3(IWorkerId id, string path, i64 minPartitions)')
    print('  IDataFrameId partitionObjectFile(IWorkerId id, string path)')
    print('  IDataFrameId partitionObjectFile3(IWorkerId id, string path, ISource src)')
    print('  IDataFrameId partitionTextFile(IWorkerId id, string path)')
    print('  IDataFrameId partitionJsonFile3a(IWorkerId id, string path, bool objectMapping)')
    print('  IDataFrameId partitionJsonFile3b(IWorkerId id, string path, ISource src)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IWorkerService.Client(protocol)
transport.open()

if cmd == 'newInstance':
    if len(args) != 2:
        print('newInstance requires 2 args')
        sys.exit(1)
    pp.pprint(client.newInstance(eval(args[0]), args[1],))

elif cmd == 'newInstance3a':
    if len(args) != 3:
        print('newInstance3a requires 3 args')
        sys.exit(1)
    pp.pprint(client.newInstance3a(eval(args[0]), args[1], args[2],))

elif cmd == 'newInstance3b':
    if len(args) != 3:
        print('newInstance3b requires 3 args')
        sys.exit(1)
    pp.pprint(client.newInstance3b(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'newInstance4':
    if len(args) != 4:
        print('newInstance4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.newInstance4(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'setName':
    if len(args) != 2:
        print('setName requires 2 args')
        sys.exit(1)
    pp.pprint(client.setName(eval(args[0]), args[1],))

elif cmd == 'parallelize':
    if len(args) != 2:
        print('parallelize requires 2 args')
        sys.exit(1)
    pp.pprint(client.parallelize(eval(args[0]), eval(args[1]),))

elif cmd == 'parallelize3':
    if len(args) != 3:
        print('parallelize3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.parallelize3(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'importDataFrame':
    if len(args) != 2:
        print('importDataFrame requires 2 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame(eval(args[0]), eval(args[1]),))

elif cmd == 'importDataFrame3a':
    if len(args) != 3:
        print('importDataFrame3a requires 3 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame3a(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'importDataFrame3b':
    if len(args) != 3:
        print('importDataFrame3b requires 3 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame3b(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'importDataFrame4':
    if len(args) != 4:
        print('importDataFrame4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame4(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'textFile':
    if len(args) != 2:
        print('textFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.textFile(eval(args[0]), args[1],))

elif cmd == 'textFile3':
    if len(args) != 3:
        print('textFile3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.textFile3(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionObjectFile':
    if len(args) != 2:
        print('partitionObjectFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile(eval(args[0]), args[1],))

elif cmd == 'partitionObjectFile3':
    if len(args) != 3:
        print('partitionObjectFile3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile3(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionTextFile':
    if len(args) != 2:
        print('partitionTextFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.partitionTextFile(eval(args[0]), args[1],))

elif cmd == 'partitionJsonFile3a':
    if len(args) != 3:
        print('partitionJsonFile3a requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile3a(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionJsonFile3b':
    if len(args) != 3:
        print('partitionJsonFile3b requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile3b(eval(args[0]), args[1], eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
